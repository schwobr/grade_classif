#AUTOGENERATED! DO NOT EDIT! File to edit: dev/24_models.metrics.ipynb (unless otherwise specified).

__all__ = ['accuracy', 'fp_rate', 'fn_rate', 'precision', 'recall', 'f_beta', 'f_1']

#Cell
def _reshape(input, target):
    n = target.shape[0]
    input = input.argmax(dim=-1).view(n,-1)
    target = target.view(n,-1)
    return input, target

#Cell
def accuracy(input, target):
    input, target = _reshape(input, target)
    true = (input==target).float().sum()
    return true/target.shape.numel()

#Cell
def fp_rate(input, target):
    input, target = _reshape(input, target)
    tn = ((input==0)&(target==0)).float().sum()
    fp = ((input==1)&(target==0)).float().sum()
    return fp/(fp+tn+1e-7)

#Cell
def fn_rate(input, target):
    input, target = _reshape(input, target)
    tp = ((input==1)&(target==1)).float().sum()
    fn = ((input==0)&(target==1)).float().sum()
    return fn/(fn+tp+1e-7)

#Cell
def precision(input, target, cat=0):
    input, target = _reshape(input, target)
    tp = ((input==cat)&(target==cat)).float().sum()
    fp = ((input==cat)&(target!=cat)).float().sum()
    return tp/(fp+tp+1e-7)

#Cell
def recall(input, target, cat=0):
    input, target = _reshape(input, target)
    tp = ((input==cat)&(target==cat)).float().sum()
    fn = ((input!=cat)&(target==cat)).float().sum()
    return tp/(fp+tp+1e-7)

#Cell
def f_beta(input, target, beta=1, cat=0):
    prec = precision(input, target, cat)
    rec = recall(input, target, cat)
    return (1+beta**2)*prec*rec/(beta**2*prec+rec)

#Cell
def f_1(input, target, cat=0):
    return f_beta(input, target, beta=1, cat=cat)