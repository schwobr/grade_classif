#AUTOGENERATED! DO NOT EDIT! File to edit: dev/22_models_utils.ipynb (unless otherwise specified).

__all__ = ['named_leaf_modules', 'get_sizes']

#Cell
import torch
from ..core import ifnone
from .hooks import Hooks
import numpy as np

#Cell
def named_leaf_modules(name, model):
    named_children = list(model.named_children())
    if named_children==[]:
        model.name = name
        return [model]
    else:
        res = []
        for n, m in named_children:
            pref = name+'.' if name != '' else ''
            res += named_leaf_modules(pref+n, m)
        return res

#Cell
def get_sizes(model, input_shape=(3, 224, 224), leaf_modules=None):
    leaf_modules = ifnone(leaf_modules, named_leaf_modules('', model))

    def _hook(model, input, output):
        return output

    mods = [m for m in leaf_modules]
    with Hooks(mods, _hook) as hooks:
        x = torch.rand(2, *input_shape)
        model.eval()(x)
        sizes = [hook.stored.shape for hook in hooks]
    return np.array(sizes), leaf_modules