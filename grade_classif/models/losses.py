#AUTOGENERATED! DO NOT EDIT! File to edit: dev/25_models.losses.ipynb (unless otherwise specified).

__all__ = ['reduce', 'focal_loss', 'FocalLoss']

#Cell
from ..imports import *

#Cell
def reduce(loss, reduction):
    if reduction == 'mean':
        return loss.mean()
    elif reduction == 'sum':
        return loss.sum()
    else:
        return loss

#Cell
def focal_loss(input, target, reduction='mean', beta=0.5, gamma=2., eps=1e-7, **kwargs):
    n = input.size(0)
    iflat = torch.softmax(input, dim=1)[:, 1].view(n, -1).clamp(eps, 1-eps)
    tflat = target.view(n, -1).float()
    focal = -(beta*tflat*(1-iflat).pow(gamma)*iflat.log()+
             (1-beta)*(1-tflat)*iflat.pow(gamma)*(1-iflat).log()).mean(-1)
    return reduce(focal, reduction)

#Cell
class FocalLoss(nn.Module):
    def __init__(self, beta=0.5, gamma=2., reduction='mean'):
        super().__init__()
        self.beta = beta
        self.gamma = gamma
        self.reduction = reduction

    def forward(self, input, target, **kwargs):
        loss = focal_loss(input, target, beta=self.beta, gamma=self.gamma, reduction=self.reduction, **kwargs)
        return loss