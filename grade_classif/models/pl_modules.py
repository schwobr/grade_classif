#AUTOGENERATED! DO NOT EDIT! File to edit: dev/07_models_pl_modules.ipynb (unless otherwise specified).

__all__ = ['BaseModule', 'GradesClassifModel']

#Cell
import pytorch_lightning as pl
import torch
import torch.nn as nn
from torch.optim.lr_scheduler import OneCycleLR, CosineAnnealingLR, ReduceLROnPlateau
from ..data.dataset import ImageClassifDataset, NormDataset
import albumentations as alb
import timm

#Cell
def _get_loss(loss_name, weight, reduction):
    if loss_name == 'cross-entropy':
        loss = nn.CrossEntropyLoss(torch.tensor([weight, 1.]), reduction=reduction)
    if loss_name == 'mse':
        loss = nn.MSELoss(reduction=reduction)
    return loss.__call__

#Cell
def _get_scheduler(opt, name, total_steps, lr):
    if name == 'one-cycle':
        sched = OneCycleLR(opt, lr, total_steps=total_steps)
        sched.step_on_batch = True
    elif name == 'cosine-anneal':
        sched = CosineAnnealingLR(opt, total_steps)
        sched.step_on_batch = True
    elif name == 'reduce_on_plateau':
        sched= ReduceLROnPlateau(opt)
        sched.step_on_batch = False
    else:
        sched = None
    return sched

#Cell
class BaseModule(pl.LightningModule):
    def __init__(self, hparams):
        super(BaseModule, self).__init__()
        self.hparams = hparams
        self.loss = _get_loss(hparams.loss, hparams.weight, hparams.reduction)
        self.bs = hparams.batch_size
        self.lr = hparams.lr
        self.wd = hparams.wd
        self.leaf_modules = named_leaf_modules('', self)
        self.sizes = self.get_sizes()

    def training_step(self, batch, batch_nb):
        # REQUIRED
        x, y = batch
        y_hat = self(x)
        loss = self.loss(y_hat, y)
        lr = self.sched.optimizer.param_groups[-1]['lr']
        log = {'train_loss': loss, 'lr': lr}
        return {'loss': loss, 'log': log}


    def validation_step(self, batch, batch_nb):
        # OPTIONAL
        x, y = batch
        y_hat = self(x)
        loss = self.loss(y_hat, y)
        return {'val_loss': loss}


    def validation_end(self, outputs):
        # OPTIONAL
        loss = torch.stack([x['val_loss'] for x in outputs]).mean()
        log = {'val_loss': loss}
        return {'val_loss': loss, 'log': log}


    def test_step(self, batch, batch_nb):
        # OPTIONAL
        x, y = batch
        y_hat = self(x)
        return {'test_loss': self.loss(y_hat, y)}


    def test_end(self, outputs):
        # OPTIONAL
        avg_loss = torch.stack([x['test_loss'] for x in outputs]).mean()
        return {'avg_test_loss': avg_loss}

    def configure_optimizers(self):
        # REQUIRED
        opt = torch.optim.Adam(self.parameters(), lr=self.lr)
        self.sched = _get_scheduler(opt, self.haparams.sched, self.lr, self.hparams.epochs*len(self.train_dataloader()))
        return opt

    def on_after_backward(self):
        for pg in self.sched.optimizer.param_groups:
            for p in pg['params']: p.data.mul_(1 - self.wd*pg['lr'])

    def on_batch_end(self):
        if self.sched is not None and self.sched.step_on_batch:
            self.sched.step()

    def on_epoch_end(self):
        if self.sched is not None and not self.sched.step_on_batch:
            self.sched.step()

    @pl.data_loader
    def train_dataloader(self):
        return DataLoader(self.data.train, batch_size=self.bs, shuffle=True)


    @pl.data_loader
    def val_dataloader(self):
        # OPTIONAL
        # can also return a list of val dataloaders
        return DataLoader(self.data.valid, batch_size=self.bs)

    @pl.data_loader
    def test_dataloader(self):
        # OPTIONAL
        # can also return a list of test dataloaders
        return DataLoader(self.data.test, batch_size=self.bs) if self.data.test is not None else None

    def load(self, version):
        save_dir = hparams.savedir/f'lightning_logs/version_{version}/checkpoints'
        path = next(save_dir.iterdir())
        checkpoint = torch.load(path, map_location=lambda storage, loc: storage)
        self.load_state_dict(checkpoint['state_dict'])

    def get_sizes(self):
        sizes = []
        size_handles = []
        def _hook(model, input, output):
            sizes.append((model.name, model._get_name(), output.shape[1:]))
        for n, m in self.named_modules:
            m.name = n
            size_handles.append(m.register_forward_hook(_hook))
        x = next(iter(self.train_dataloader()))[0]
        self.eval()(x)

        for handle in size_handles:
            handle.remove()

        return np.array(sizes)

    def my_summarize(self):
        summary = pd.DataFrame(self.sizes, columns=['Type', 'Name', 'Output Shape'])
        return summary

    def fit(self, epochs=self.haram.epochs, gpus=[0]):
        trainer = pl.Trainer(gpus=gpus, default_save_path=self.hparams.savedir, min_nb_epochs=epochs, max_nb_epochs=epochs)
        trainer.fit(self)

#Cell
class GradesClassifModel(BaseModule):
    def __init__(self, hparams):
        tfms= []
        self.data = (ImageClassifDataset.
                     from_folder(Path(hparams.data), lambda x: x.parts[-3], classes=['1', '3'], extensions=['.png'], include=['train', 'valid']).
                     split_by_folder().
                     to_tensor(tfm_y=False))
        base_model = timm.create_model(hparams.model, pretrained=True)
        self.base_model = nn.Sequential(*list(base_model.children())[:-2])
        head = [nn.AdaptiveAvgPool2d(1), nn.Flatten()]
        nf = get_num_features(self.base_model)
        p = hparams.dropout
        head += bn_drop_lin(nf, 512, p=p/2) + bn_drop_lin(512, 2, p=p)
        self.head = nn.Sequential(*head)
        super(GradesClassifModel, self).__init__(hparams)

    def forward(self, x):
        x = self.base_model(x)
        x = self.head(x)
        return x