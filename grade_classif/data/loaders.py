# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/11_data.loaders.ipynb (unless otherwise specified).

__all__ = ['ItemLoader', 'ImageLoader', 'MaskLoader', 'CategoryLoader', 'SlideLoader']

# Cell
from ..imports import *
from skimage.color import rgb2hed
from openslide import OpenSlide
import staintools

# Cell
class ItemLoader:
    def __call__(self, item: Any):
        raise NotImplementedError

# Cell
def _get_norm(norm_method, norm_ref):
    if norm_method is None:
        return None
    assert (
        norm_ref is not None
    ), "Reference image is needed for staintools normalization methods."
    if norm_method == "reinhard":
        norm = staintools.ReinhardColorNormalizer()
    else:
        norm = staintools.StainNormalizer(method=norm_method)
    target = imread(norm_ref, cv2.IMREAD_COLOR)
    target = staintools.LuminosityStandardizer.standardize(target)
    norm.fit(target)
    return norm

# Cell
class ImageLoader(ItemLoader):
    def __init__(
        self,
        div: bool = True,
        norm_ref: Optional[str] = None,
        norm_method: Optional[str] = None,
    ):
        self.div = div
        self.norm = _get_norm(norm_method, norm_ref)

    def __call__(self, item: Path) -> NDArray[(Any, Any, 3), Number]:
        img = imread(item, cv2.IMREAD_COLOR)
        if self.norm is not None:
            img = staintools.LuminosityStandardizer.standardize(img)
            img = self.norm.transform(img)
        if self.div:
            img = img.astype(np.float32) / 255
        return img

# Cell
class MaskLoader(ImageLoader):
    def __init__(self):
        super().__init__(div=False)

# Cell
class CategoryLoader(ItemLoader):
    def __init__(
        self, n_classes: Optional[int] = None, classes: Optional[List[Any]] = None
    ):
        if n_classes is not None:
            self.n_classes = n_classes
            if classes is None:
                self.classes = list(range(n_classes))
            else:
                self.classes = classes
        else:
            assert (
                classes is not None
            ), "you must either specify a list of classes or a number of classes"
            self.classes = classes
            self.n_classes = len(classes)

    def __call__(self, item: Any) -> int:
        return self.classes.index(item)

# Cell
class SlideLoader(ItemLoader):
    def __init__(self, div: bool = True, level=0, size=299):
        self.div = div
        self.level = level
        self.size = size

    def __call__(self, item: str, slide: OpenSlide) -> NDArray[(Any, Any, 3), Number]:
        _, x, y = item.split('__')
        coord = (int(x), int(y))
        img = slide.read_region(coord, self.level, (self.size, self.size)).convert('RGB')
        img = np.array(img)
        if self.div:
            img = img.astype(np.float32) / 255
        return img