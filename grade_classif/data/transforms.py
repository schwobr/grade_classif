#AUTOGENERATED! DO NOT EDIT! File to edit: dev/14_data.transforms.ipynb (unless otherwise specified).

__all__ = ['DeterministicHSV', 'DeterministicBrightnessContrast', 'DeterministicGamma', 'DeterministicRGBShift',
           'get_transforms1', 'get_transforms2', 'get_transforms3', 'get_transforms4']

#Cell
from albumentations import (RandomRotate90,
                            Flip,
                            Transpose,
                            GridDistortion,
                            RandomCrop,
                            GaussianBlur,
                            RandomGamma,
                            RandomBrightnessContrast,
                            HueSaturationValue,
                            RGBShift,
                            CenterCrop)
import albumentations.augmentations.functional as F
from ..imports import *
from math import floor

#Cell
def _shift_hsv_non_uint8(img, hue_shift, sat_shift, val_shift):
    dtype = img.dtype
    img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
    hue, sat, val = cv2.split(img)
    hue = cv2.add(hue, hue_shift)
    hue = np.where(hue < 0, hue + 360, hue)
    hue = np.where(hue > 360, hue - 360, hue)
    hue = hue.astype(dtype)
    sat = F.clip(sat + sat_shift * (sat > 0.1), dtype, 255 if dtype == np.uint8 else 1.0)
    val = F.clip(val + val_shift * (sat > 0.1), dtype, 255 if dtype == np.uint8 else 1.0)
    img = cv2.merge((hue, sat, val)).astype(dtype)
    img = cv2.cvtColor(img, cv2.COLOR_HSV2RGB)
    return img
F._shift_hsv_non_uint8 = _shift_hsv_non_uint8

#Cell
def _mod(x, y):
    x -= floor(x / y) * y
    return x

#Cell
def _get_params(tfm):
    params = {}
    for k, v in tfm.base_values.items():
        v_min, v_max = tfm.max_values[k]
        if v_min == v_max:
            params[k] = v_min
        else:
            p = v + tfm.n * tfm.mult
            p = _mod(p - v_min, v_max - v_min) + v_min
            params[k] = p
    tfm.n += 1
    tfm.n %= tfm.num_els
    return params

#Cell
def _init_attrs(tfm, num_els=1):
    tfm.always_apply = True
    tfm.num_els = num_els
    tfm.p = 1
    tfm.n = 0
    tfm.mult = 83
    tfm.base_values = {x: (x_lim[1]-x_lim[0])/7 for x, x_lim in tfm.max_values.items()}

#Cell
class DeterministicHSV(HueSaturationValue):
    def __init__(self, num_els=1, **kwargs):
        super().__init__(**kwargs)
        self.max_values = {"hue_shift": self.hue_shift_limit,
                           "sat_shift": self.sat_shift_limit,
                           "val_shift": self.val_shift_limit}
        _init_attrs(self, num_els)

    def get_params(self):
        return _get_params(self)

#Cell
class DeterministicBrightnessContrast(RandomBrightnessContrast):
    def __init__(self, num_els=1, **kwargs):
        super().__init__(**kwargs)
        self.max_values = {"alpha": tuple(x + 1 for x in self.contrast_limit),
                           "beta": self.brightness_limit}
        _init_attrs(self,  num_els)

    def get_params(self):
        return _get_params(self)

#Cell
class DeterministicGamma(RandomGamma):
    def __init__(self, num_els=1, **kwargs):
        super().__init__(**kwargs)
        self.max_values = {"gamma": tuple(x/100 for x in self.gamma_limit)}
        _init_attrs(self, num_els)

    def get_params(self):
        return _get_params(self)

#Cell
class DeterministicRGBShift(RGBShift):
    def __init__(self, num_els=1, **kwargs):
        super().__init__(**kwargs)
        self.max_values = {"r_shift": self.r_shift_limit,
                           "g_shift": self.g_shift_limit,
                           "b_shift": self.b_shift_limit}
        _init_attrs(self, num_els)

    def get_params(self):
        return _get_params(self)

#Cell
def get_transforms1(size, num_els=1):
    tfms = [RandomCrop(size, size),
            RandomRotate90(),
            Flip(),
            Transpose(),
            GridDistortion(distort_limit=0.05, p=0.2),
            RandomGamma(p=0.2),
            GaussianBlur(blur_limit=3, p=0.2)]
    val_tfms = [CenterCrop(size, size)]
    return tfms, val_tfms

#Cell
def get_transforms2(size, num_els=1):
    tfms = [RandomCrop(size, size),
            RandomRotate90(),
            Flip(),
            Transpose(),
            GridDistortion(distort_limit=0.05, p=0.2),
            RandomGamma(p=0.2),
            GaussianBlur(blur_limit=3, p=0.2),
            RGBShift(0.15, 0.15, 0.15)]
    val_tfms = [CenterCrop(size, size)]
    return tfms, val_tfms

#Cell
def get_transforms3(size, num_els=1):
    tfms = [RandomCrop(size, size),
            RandomRotate90(),
            Flip(),
            Transpose(),
            GridDistortion(distort_limit=0.05, p=0.2),
            RandomBrightnessContrast(p=0.7),
            GaussianBlur(blur_limit=3, p=0.2),
            RGBShift(0.2, 0.2, 0.2, p=0.8)]
    val_tfms = [CenterCrop(size, size),
                DeterministicBrightnessContrast(num_els=num_els),
                DeterministicRGBShift(num_els=num_els, r_shift_limit=0.2, g_shift_limit=0.2, b_shift_limit=0.2)]
    return tfms, val_tfms

#Cell
def get_transforms4(size, num_els=1):
    tfms = [RandomCrop(size, size),
            RandomRotate90(),
            Flip(),
            Transpose(),
            GridDistortion(distort_limit=0.05, p=0.2),
            #RandomBrightnessContrast(0.2, 0., p=0.2),
            GaussianBlur(blur_limit=3, p=0.2),
            RandomGamma(gamma_limit=(40, 160), p=1),
            HueSaturationValue(40, .2, .2, p=1)]
    val_tfms = [CenterCrop(size, size),
                DeterministicGamma(num_els=num_els, gamma_limit=(40, 160)),
                #DeterministicBrightnessContrast(num_els=num_els, brightness_limit=0.2, contrast_limit=0.),
                DeterministicHSV(num_els=num_els, hue_shift_limit=40, sat_shift_limit=.1, val_shift_limit=.15)]
    return tfms, val_tfms