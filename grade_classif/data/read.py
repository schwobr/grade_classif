#AUTOGENERATED! DO NOT EDIT! File to edit: dev/10_data_read.ipynb (unless otherwise specified).

__all__ = ['get_items', 'get_scan', 'split', 'create_csv']

#Cell
from ..core import ifnone
import pandas as pd
import numpy as np

#Cell
def _check_include(obj, include):
    return include is None or obj.name in include

#Cell
def _check_exclude(obj, exclude):
    return exclude is None or obj.name not in exclude

#Cell
def _check_valid(obj, include, exclude):
    return _check_include(obj, include) and _check_exclude(obj, exclude) and not obj.name.startswith('.')

#Cell
def get_items(folder, label_func, recurse=True, extensions=None, include=None, exclude=None, filterfunc=None):
    items = []
    labels = []
    filterfunc = ifnone(filterfunc, lambda x: True)
    for obj in folder.iterdir():
        if obj.is_file():
            if extensions is None or obj.suffix in extensions and filterfunc(obj):
                items.append(obj)
                labels.append(label_func(obj))
        elif recurse and _check_valid(obj, include, exclude):
            items_r, labels_r = get_items(obj, label_func, extensions=extensions, filterfunc=filterfunc)
            items += items_r
            labels += labels_r
    return items, labels

#Cell
def get_scan(folder, scan_name, include=None, exclude=None):
    dirs = []
    for item in folder.iterdir():
        if item.name == scan_name and _check_valid(item, include, exclude):
            return item
        if item.is_dir():
            dirs.append(item)
    for item in dirs:
        obj = get_scan(item, scan_name)
        if obj is not None:
            return obj

#Cell
def split(scans, grades, valid_pct=0.2):
    grades1 = list(filter(lambda x: x == '1', grades))
    order = np.random.permutation(len(scans))
    n = {'1': len(grades1), '3': len(grades)-len(grades1)}
    k = {'1': 0, '3': 0}
    splits = np.zeros(len(scans), dtype=str)
    for o in order:
        grade, scan = grades[o], scans[o]
        if k[grade] > valid_pct*n[grade]:
            split = 'train'
        else:
            split = 'valid'
        k[grade] += 1
        splits[o] = split
    return splits

#Cell
def create_csv(csv_path, data_path, label_func=None):
    label_func = ifnone(label_func, lambda x: x.parts[-3])
    scans, grades = get_items(data_path, label_func, include=['1', '3'])
    scans = list(map(lambda x: x.parent.name, scans))
    splits = split(scans, grades)
    df = pd.DataFrame({'scan': scans, 'grade': grades, 'split': splits})
    df.to_csv(csv_path, index=False)
    return df