#AUTOGENERATED! DO NOT EDIT! File to edit: dev/81_params.parser.ipynb (unless otherwise specified).

__all__ = ['hparams']

#Cell
from .defaults import *
from ..imports import *
from argparse import ArgumentParser

#Cell
_parser = ArgumentParser()
_parser.add_argument('--file', '-f', help='notebook convenience')
_parser.add_argument('--HistoryManager.hist_file', help='nbconvert convenience')
_parser.add_argument('--sched', default=SCHED, choices=['one-cycle', 'cosine-anneal', 'reduce-on-plateau', 'none'], help='scheduler for the optimizer')
_parser.add_argument('--data', default=DATA, help='path to folder containing data')
_parser.add_argument('--data-csv', default=DATA_CSV, help='path to csv listing scans with their grades and split')
_parser.add_argument('--concepts', default=CONCEPTS, help='path to csv listing pathes with their corresponding concept')
_parser.add_argument('--concept-classes', default=CONCEPT_CLASSES, help='path to csv giving a class for each concept')
_parser.add_argument('--level', default=LEVEL, type=int, help='zoom level to work on')
_parser.add_argument('--full-data', default=FULL_DATA, help='path to folder containing all data (different levels)')
_parser.add_argument('--scan', default=SCAN, help='name of scan to predict. If not specified, all valid scans are predicted')
_parser.add_argument('--levels', default=PRED_LEVELS, type=int, help='zoom levels to work on for prediction')
_parser.add_argument('--versions', default=VERSIONS, type=int, nargs='*', help='list of model versions to use. Must specify one for each level the in same order.')
_parser.add_argument('--checkpoints', default=CHECKPOINTS, nargs='*', help='checkpoint to load for each version. None will load the last one.')
_parser.add_argument('--norm-versions', default=NORM_VERSIONS, type=int, nargs='*', help='list of normalizer versionsto use. Must specify one for each level the in same order.')
_parser.add_argument('--batch-size', default=BATCH_SIZE, type=int, help='batch size')
_parser.add_argument('--size', default=SIZE, type=int, help='size of the image (as an integer, image is supposed square)')
_parser.add_argument('--loss', default=LOSS, choices=['cross-entropy', 'mse', 'focal', 'bce'], help='loss function')
_parser.add_argument('--csv', default=NORM_CSV, type=Path, help='path to csv where normalizer train images are stored')
_parser.add_argument('--savedir', default=MODELS, type=Path, help='directory to save models and logs in')
_parser.add_argument('--model', default=MODEL, help='name of the base architecture to use for classification')
_parser.add_argument('--normalizer', default=NORMALIZER, help='encoder to use for normalization unet')
_parser.add_argument('--norm-version', default=NORM_VERSION, type=int, help='version of the encoder to load for classification')
_parser.add_argument('--rand-weights', action='store_true', help='specify to avoid using a pretrained model for training')
_parser.add_argument('--gpus', default=GPUS, nargs='*', type=int, help='list of gpus you want to use for training (as numbers)')
_parser.add_argument('--reduction', default=REDUCTION, choices=['mean', 'sum', 'none'], help='reduction to apply to loss')
_parser.add_argument('--epochs', default=EPOCHS, type=int, help='number of epochs')
_parser.add_argument('--weight', type=float, default=WEIGHT, help='weight to give to grade 1 (grade 3 being weighted to 1)')
_parser.add_argument('--dropout', default=DROPOUT, type=float, help='dropout value')
_parser.add_argument('--lr', default=LR, type=float, help='learning rate')
_parser.add_argument('--wd', type=float, default=WD, help='weight decay')
_parser.add_argument('--sample-mode', type=int, default=0, choices=[0, 1, 2], help='type 0 for regular sampling, 1 for oversampling, 2 for undersampling')
_parser.add_argument('--filt', default=FILT, choices=['K', 'K_inter', 'out', 'all'], help='patches to filter depending on their corresponding concept')
_parser.add_argument('--open-mode', default=OPEN_MODE, choices=['3G', 'RGB'], help='How the image should be opened (3G for grayscale and RGB for color)')

#Cell
hparams = _parser.parse_args()