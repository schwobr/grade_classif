#AUTOGENERATED! DO NOT EDIT! File to edit: dev/81_params_norm.ipynb (unless otherwise specified).

__all__ = ['hparams']

#Cell
from test_tube import HyperOptArgumentParser
from .defaults import *
from pathlib import Path

#Cell
_parser = HyperOptArgumentParser(strategy='random_search')
_parser.add_argument('--file', '-f', help='notebook convenience')
_parser.add_argument('--HistoryManager.hist_file', help='nbconvert convenience')
_parser.add_argument('--sched', default=SCHED, choices=['one-cycle', 'cosine-anneal', 'reduce-on-plateau', 'none'], help='scheduler for the optimizer')
_parser.add_argument('--data', default=DATA, help='path to folder containing data')
_parser.add_argument('--data-csv', default=DATA_CSV, help='path to csv listing scans with their grades and split')
_parser.add_argument('--level', default=LEVEL, type=int, help='zoom level to work on')
_parser.add_argument('--batch-size', default=BATCH_SIZE, type=int, help='batch size')
_parser.add_argument('--size', default=SIZE, type=int, help='size of the image (as an integer, image is supposed square)')
_parser.add_argument('--loss', default=LOSS, choices=['cross-entropy', 'mse'], help='loss function')
_parser.add_argument('--csv', default=NORM_CSV, type=Path, help='path to csv where normalizer train images are stored')
_parser.add_argument('--savedir', default=MODELS, type=Path, help='directory to save models and logs in')
_parser.add_argument('--rand-weights', action='store_true')
_parser.add_argument('--gpus', default=GPUS, nargs='*', type=int, help='list of gpus you want to use for training (as numbers)')
_parser.add_argument('--reduction', default=REDUCTION, choices=['mean', 'sum', 'none'], help='reduction to apply to loss')
_parser.add_argument('--epochs', default=EPOCHS, type=int, help='number of epochs')
_parser.opt_range('--dropout', default=DROPOUT, type=float, tunable=True, low=0., high=0.8, nb_samples=5, help='dropout value')
_parser.opt_list('--model', default=MODEL, tunable=True, options=['resnet34', 'resnet50', 'efficientnet_b1'], help='name of the base architecture to use for training')
_parser.opt_range('--lr', default=LR, type=float, tunable=True, low=1e-4, high=1e-1, nb_samples=6, log_base=10, help='learning rate')
_parser.opt_range('--wd', type=float, default=WD, tunable=True, low=1e-6, high=1., nb_samples=5, log_base=10, help='weight decay')

#Cell
hparams = _parser.parse_args()