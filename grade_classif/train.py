# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_train.ipynb (unless otherwise specified).

__all__ = ['train_normalizer', 'train_classifier', 'train_discriminator', 'train_cancer_detector',
           'train_mil_cancer_detector', 'train_mil_reargmt']

# Cell
from .imports import *
from .models.metrics import accuracy, f_1, precision, recall
from .models.plmodules import (
    ImageClassifDataModule,
    ClassifModel,
    Normalizer,
    NormDataModule,
    MILModel,
    MILDataModule
)

# Cell
def train_normalizer(hparams: Namespace) -> Normalizer:
    hparams = vars(hparams)
    dm = NormDataModule(**hparams)
    model = Normalizer(**hparams)
    # model.freeze_encoder()
    model.fit(dm)
    return model

# Cell
def train_classifier(hparams: Namespace) -> ClassifModel:
    hparams = vars(hparams)
    classes = ["1", "3"]
    dm = ImageClassifDataModule(classes=classes, label_func=lambda x: x.parts[-3], **hparams)
    model = ClassifModel(
        classes=classes,
        n_classes=len(classes),
        **hparams,
        metrics=[accuracy]
        + [
            met
            for i in range(2)
            for met in (
                partial(precision, cat=i),
                partial(recall, cat=i),
                partial(f_1, cat=i),
            )
        ]
    )
    model.fit(dm)
    return model

# Cell
def train_discriminator(hparams: Namespace) -> ClassifModel:
    classes = ["04", "05", "08"]
    def _label_func(x):
        for cl in classes:
            if f"PACS{cl}" in x.name:
                return cl
    hparams = vars(hparams)
    dm = ImageClassifDataModule(classes=classes, label_func=_label_func, **hparams)
    model = ClassifModel(
        classes=classes,
        n_classes=len(classes),
        **hparams,
        metrics=[accuracy] + [met for met in (precision, recall, f_1)]
    )
    model.fit(dm)
    return model

# Cell
def train_cancer_detector(hparams: Namespace) -> ClassifModel:
    hparams = vars(hparams)
    classes = ["artefact", "cancer", "non_cancer"]
    dm = ImageClassifDataModule(
        classes=classes,
        label_func=lambda x: x.parent.name,
        get_id=lambda x: "_".join(x.name.split("_")[:-2]),
        **hparams
    )
    model = ClassifModel(
        classes=classes,
        n_classes=len(classes),
        **hparams,
        metrics=[accuracy] + [met for met in (precision, recall, f_1)]
    )
    model.fit(dm)
    return model

# Cell
def train_mil_cancer_detector(hparams: Namespace) -> MILModel:
    hparams = vars(hparams)
    dm = MILDataModule(classes=["None", "Infilt"], **hparams)
    model = MILModel(
        **hparams,
        metrics=[accuracy]
        + [
            met
            for i in range(2)
            for met in (
                partial(precision, cat=i),
                partial(recall, cat=i),
                partial(f_1, cat=i),
            )
        ]
    )
    model.fit(dm, num_sanity_val_steps=0, reload_dataloaders_every_epoch=True)
    return model

# Cell
def train_mil_reargmt(hparams: Namespace) -> MILModel:
    hparams = vars(hparams)
    dm = MILDataModule(
        classes=["NoReargmt", "DHL_THL"],
        extensions=[".mrxs", ".svs"],
        label_func=lambda x: x.parts[-3],
        **hparams
    )
    model = MILModel(
        **hparams,
        metrics=[accuracy]
        + [
            met
            for i in range(2)
            for met in (
                partial(precision, cat=i),
                partial(recall, cat=i),
                partial(f_1, cat=i),
            )
        ]
    )
    model.fit(dm, num_sanity_val_steps=0, reload_dataloaders_every_epoch=True)
    return model