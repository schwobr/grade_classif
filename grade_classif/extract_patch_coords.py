# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/_extract_patch_coords.ipynb (unless otherwise specified).

__all__ = ['parser', 'args', 'overlap_size', 'files']

# Cell
from .imports import *
from openslide import OpenSlide
from skimage.filters import threshold_otsu
from argparse import ArgumentParser
import csv
from fastai.data.transforms import get_files

# Cell
parser = ArgumentParser()
parser.add_argument('-f')
parser.add_argument('--infolder', type=Path)
parser.add_argument('--size', type=int, default=299)
parser.add_argument('--level', type=int, default=0)
parser.add_argument('--overlap', type=float, default=0)
parser.add_argument('--outfile', type=Path)

# Cell
args = parser.parse_args()

# Cell
overlap_size = args.overlap * args.size

# Cell
files = get_files(args.infolder, extensions=['.mrxs', '.svs'])

# Cell
with args.outfile.open("w") as f:
    writer = csv.DictWriter(f, ["Slidename", "X", "Y"])
    writer.writeheader()
    for file in files:
        print(file.stem)
        slide = OpenSlide(str(file))
        dsr = int(slide.level_downsamples[args.level])
        w, h = slide.dimensions
        thumb_w = int((w / dsr - overlap_size) / (args.size - overlap_size))
        thumb_h = int((h / dsr - overlap_size) / (args.size - overlap_size))
        thumb = slide.get_thumbnail((thumb_w, thumb_h))
        thumb = np.array(thumb.convert("L"))
        thr = threshold_otsu(thumb[thumb > 0])
        for y, x in np.argwhere((thumb > 0) & (thumb < thr)):
            x = x * (args.size - overlap_size) * dsr
            y = y * (args.size - overlap_size) * dsr
            writer.writerow({"Slidename": file.stem, "X": x, "Y": y})
